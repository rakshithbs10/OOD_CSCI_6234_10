generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  email     String  @unique
  password  String
  firstName String?
  lastName  String?
  position  String?

  notifyAssignedTasks Boolean @default(true)
  notifyTaskComments  Boolean @default(true)
  notifyDueDates      Boolean @default(true)
  notifyBoardInvites  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  boards       Board[] @relation("BoardMembers")
  ownedBoards  Board[] @relation("BoardOwner") // âœ… Matches Board.owner
}  

model Team {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  members   String[] // Array of user names or IDs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Board {
  id        Int      @id @default(autoincrement())
  name      String
  summary   String?

  owner     User     @relation("BoardOwner", fields: [ownerId], references: [id])
  ownerId   Int

  users     User[]   @relation("BoardMembers")
  columns   Column[]
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id                 Int     @id @default(autoincrement())
  title              String
  description        String
  acceptanceCriteria String
  storyPoints        Int
  difficulty         Int
  verified           Boolean @default(false)
  completed          Boolean @default(false)
  attachment         String?

  createdBy  String
  assignedTo String
  verifier   String

  board    Board   @relation(fields: [boardId], references: [id])
  boardId  Int
  column   Column? @relation(fields: [columnId], references: [id])
  columnId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Column {
  id        Int      @id @default(autoincrement())
  name      String
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   Int
  tasks     Task[] // A column has many tasks
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
